apply plugin: 'scala'
apply plugin: 'eclipse'
compileTestScala.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
    mavenLocal()
}

tasks.withType(Test) {
    systemProperties = System.getProperties() // Forward defined properties to the test JVM
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
        exceptionFormat = 'full'
    }
    outputs.upToDateWhen { false } // force tests to run every time

    // We only test the python:3.7 and python:3.9 runtimes.
    // The default python:3.6 is deprecated (it reached end of support).
    include '**/*IBMPython37*'
    include '**/*IBMPython39*'
}

task testWithoutCredentials(type: Test) {
  exclude '**/*Credentials*'
}

task testBlueCI(type: Test) {
  exclude '**/IBMPythonActionDB2Tests*'
}
task testBlueDeployment(type: Test) {
  include 'integration/**'
  include 'system/**'
}

dependencies {
    compile "org.scala-lang:scala-library:${gradle.scala.version}"
    compile "org.apache.openwhisk:openwhisk-tests:${gradle.openwhisk.version}:tests"
    compile "org.apache.openwhisk:openwhisk-tests:${gradle.openwhisk.version}:test-sources"
    implementation group: 'com.typesafe.akka', name: "akka-http2-support_${gradle.scala.depVersion}", version: "${gradle.akka_http.version}"
    implementation group: 'com.typesafe.akka', name: "akka-http-xml_${gradle.scala.depVersion}", version: "${gradle.akka_http.version}"
    implementation group: 'com.typesafe.akka', name: "akka-discovery_${gradle.scala.depVersion}", version: "${gradle.akka.version}"
    implementation group: 'com.typesafe.akka', name: "akka-protobuf_${gradle.scala.depVersion}", version: "${gradle.akka.version}"
    implementation group: 'com.typesafe.akka', name: "akka-remote_${gradle.scala.depVersion}", version: "${gradle.akka.version}"
    implementation group: 'com.typesafe.akka', name: "akka-cluster_${gradle.scala.depVersion}", version: "${gradle.akka.version}"
}

tasks.withType(ScalaCompile) {
    scalaCompileOptions.additionalParameters = gradle.scala.compileFlags
}

task buildArtifacts(type:Exec) {
    workingDir 'src/test/resources'
    commandLine './build.sh'
}

tasks.withType(Test) {
    dependsOn buildArtifacts
}

testClasses.dependsOn(buildArtifacts)
